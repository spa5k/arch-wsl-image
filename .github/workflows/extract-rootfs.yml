name: Extract RootFS from Docker Image

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-latest-arm64]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest-arm64" ]; then
            sed -i 's/FROM spa5k\/arch:latest/FROM spa5k\/arch:arm64/g' Dockerfile
            echo "Building for arm64"
          else
            echo "Building for amd64"
          fi

          cat Dockerfile
          docker build . -t arch

      - name: Extract RootFS
        run: |
          docker create --name arch arch echo "Arch Linux"
          docker export -o rootfs.$(dpkg --print-architecture).tar arch
          gzip rootfs.$(dpkg --print-architecture).tar
          docker rm arch

      - name: Set Vars
        id: vars
        run: |
          echo "arch=$(dpkg --print-architecture)" >> "$GITHUB_OUTPUT"

      - name: Upload RootFS
        uses: actions/upload-artifact@v4
        with:
          name: rootfs-${{ steps.vars.outputs.arch }}
          path: rootfs.*.tar.gz

  release:
    name: Release
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download RootFS for amd64
        if: matrix.os == 'ubuntu-latest'
        uses: actions/download-artifact@v4
        with:
          name: rootfs-amd64
          path: rootfs/amd64

      - name: Download RootFS for arm64
        if: matrix.os == 'ubuntu-latest-arm64'
        uses: actions/download-artifact@v4
        with:
          name: rootfs-arm64
          path: rootfs/arm64

      - name: List Files
        run: ls -R rootfs

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            rootfs/amd64/*.tar.gz
            rootfs/arm64/*.tar.gz
